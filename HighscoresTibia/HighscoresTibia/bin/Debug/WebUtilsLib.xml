<?xml version="1.0"?>
<doc>
    <assembly>
        <name>WebUtilsLib</name>
    </assembly>
    <members>
        <member name="T:WebUtilsLib.OAuth">
            <summary>
            Class that extends the OAuthBase class, making use of it's methods
            to implement a higher-level, more readable and usable, set of OAuth 2.0
            compliant routines.
            </summary>
            <seealso cref="T:WebUtilsLib.OAuthBase"/>
        </member>
        <member name="T:WebUtilsLib.OAuthBase">
            <summary>
            Base OAuth class that is capable of generating and validating
            OAuth 2.0 compliant variables, terms and urls
            </summary>
        </member>
        <member name="F:WebUtilsLib.OAuthBase.m_oAuthConsumerKeyKey">
            <summary>
            Consumer Key Obtained in the OAuth provider website (Linkedin, Twitter, etc)
            </summary>
        </member>
        <member name="F:WebUtilsLib.OAuthBase.m_oAuthCallbackKey">
            <summary>
            Callback url used for redirection when the authentication phase ends
            </summary>
        </member>
        <member name="F:WebUtilsLib.OAuthBase.m_oAuthVersionKey">
            <summary>
            OAuth Version (1.0, 2.0)
            </summary>
        </member>
        <member name="F:WebUtilsLib.OAuthBase.m_oAuthSignatureMethodKey">
            <summary>
            Signature method to be used (SHA-1, PlainText, RSA...)
            </summary>
        </member>
        <member name="F:WebUtilsLib.OAuthBase.m_oAuthSignatureKey">
            <summary>
            OAuth Request Generated Signature 
            </summary>
        </member>
        <member name="F:WebUtilsLib.OAuthBase.m_oAuthTimestampKey">
            <summary>
            Timestamp used for OAuth Signature Generation
            </summary>
        </member>
        <member name="F:WebUtilsLib.OAuthBase.m_oAuthNonceKey">
            <summary>
            Nonce is the Random String used to generate the signature within the OAuth Protocol
            </summary>
        </member>
        <member name="F:WebUtilsLib.OAuthBase.m_oAuthTokenKey">
            <summary>
            First piece of the set of tokens used on this protocol
            </summary>
        </member>
        <member name="F:WebUtilsLib.OAuthBase.m_oAuthTokenSecretKey">
            <summary>
            Second piece of the set of tokens used on this protocol
            </summary>
        </member>
        <member name="F:WebUtilsLib.OAuthBase.m_oAuthVerifier_">
            <summary>
            OAuth Verifier Entity
            </summary>
        </member>
        <member name="F:WebUtilsLib.OAuthBase.m_HMACSHA1SignatureType">
            <summary>
            Contant of the HMAC signature Type
            </summary>
        </member>
        <member name="F:WebUtilsLib.OAuthBase.m_plainTextSignatureType">
            <summary>
            Contant of the PlainText signature Type
            </summary>
        </member>
        <member name="F:WebUtilsLib.OAuthBase.m_RSASHA1SignatureType">
            <summary>
            Contant of the RSASHA1 signature Type
            </summary>
        </member>
        <member name="F:WebUtilsLib.OAuthBase.m_oAuthVersion">
            <summary>
            Contant of the current OAuthVersion
            </summary>
        </member>
        <member name="F:WebUtilsLib.OAuthBase.m_oAuthParameterPrefix">
            <summary>
            Contant of the OAuth Parameter used on the url
            </summary>
        </member>
        <member name="F:WebUtilsLib.OAuthBase.m_unreservedChars">
            <summary>
            List of unreserved characters used for the OAuth protocol
            </summary>
        </member>
        <member name="M:WebUtilsLib.OAuthBase.ComputeHash(System.Security.Cryptography.HashAlgorithm,System.String)">
            <summary>
            Auxiliar method to compute a hash value
            </summary>
            <param name="hashAlgorithm">The hashing algoirhtm used. It must be initialized prior to passing it to this method</param>
            <param name="data">Data to the hash</param>
            <returns>Base64 string of the Hash Value</returns>
        </member>
        <member name="M:WebUtilsLib.OAuthBase.GetQueryParameters(System.String)">
            <summary>
            Parse the parameters and
            organize them into a list of QueryParameters
            </summary>
            <param name="parameters">QueryString for parsing</param>
            <returns>List of Parsed QueryParameters</returns>
        </member>
        <member name="M:WebUtilsLib.OAuthBase.UrlEncode(System.String)">
            <summary>
            Applies encode to every char
            that needs it, in order
            to fit OAuth Standard
            </summary>
            <param name="value">Parameter to be encoded</param>
            <returns>Encoded parameter</returns>
        </member>
        <member name="M:WebUtilsLib.OAuthBase.NormalizeRequestParameters(System.Collections.Generic.List{WebUtilsLib.QueryParameter})">
            <summary>
            Normalizes the request parameters
            according to OAuth Standards
            </summary>
            <param name="parameters">List of preveiously sorted parameters</param>
            <returns>String representation of the normalized parameters</returns>
        </member>
        <member name="M:WebUtilsLib.OAuthBase.GenerateSignatureBase(System.Uri,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String@,System.String@)">
            <summary>
            Generate the signature base that is used to produce the signature
            </summary>
            <param name="url">The full url that needs to be signed including its non OAuth url parameters</param>
            <param name="consumerKey">The consumer key</param>        
            <param name="token">The token, if available. If not available pass null or an empty string</param>
            <param name="tokenSecret">The token secret, if available. If not available pass null or an empty string</param>
            <param name="httpMethod">Must be a Valid HTTP Method Verb. (POST or GET for instance)</param>
            <param name="timestamp">Generated Timestamp for the signature</param>
            <param name="nonce">Random Implementantion of a number for the signature</param>
            <param name="callback">Callback url,used to generate the signature</param>
            <param name="verifier">Verifier that you receive after the authorization step. Use String.Empty if you dont have it yet.</param>
            <param name="signatureType">Default value is SignatureTypes.HMACSHA1</param>
            <param name="normalizedUrl"></param>
            <param name="normalizedRequestParameters"></param>
            <returns>Generated Signature base</returns>
        </member>
        <member name="M:WebUtilsLib.OAuthBase.GenerateSignatureUsingHash(System.String,System.Security.Cryptography.HashAlgorithm)">
            <summary>
            Generate the signature value based on the given signature base and hash algorithm
            </summary>
            <param name="signatureBase">The signature based as produced by the GenerateSignatureBase method </param>
            <param name="hash">The hash algorithm used to perform the hashing. If the hashing algorithm requires initialization or a key it should be set prior to calling this method</param>
            <returns>A base64 string of the hash value</returns>
        </member>
        <member name="M:WebUtilsLib.OAuthBase.GenerateSignature(System.Uri,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String@,System.String@)">
            <summary>
            Generates a signature using the HMAC-SHA1 algorithm
            </summary>		
            <param name="url">The full url that needs to be signed including its non OAuth url parameters</param>
            <param name="consumerKey">The consumer key</param>
            <param name="consumerSecret">The consumer seceret</param>
            <param name="token">The token, if available. If not available pass null or an empty string</param>
            <param name="tokenSecret">The token secret, if available. If not available pass null or an empty string</param>
            <param name="httpMethod">The http method used. Must be a valid HTTP method verb (POST,GET,PUT, etc)</param>
            <param name="timeStamp">Generated Timestamp for the signature</param>
            <param name="nonce">Random Implementantion of a number for the signature</param>
            <param name="callback">Callback url,used to generate the signature</param>
            <param name="verifier">Verifier that you receive after the authorization step. Use String.Empty if you dont have it yet.</param>
            <param name="normalizedUrl">The normalized url to be used for the next requests</param>
            <param name="normalizedRequestParameters">The normalized request parameters to be used for next requests</param>
            <returns>A base64 string of the hash value</returns>
        </member>
        <member name="M:WebUtilsLib.OAuthBase.GenerateSignature(System.Uri,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,WebUtilsLib.OAuthBase.SignatureTypes,System.String@,System.String@)">
            <summary>
            Generates a signature using the specified signatureType 
            </summary>		
            <param name="url">The full url that needs to be signed including its non OAuth url parameters</param>
            <param name="consumerKey">The consumer key</param>
            <param name="consumerSecret">The consumer seceret</param>
            <param name="token">The token, if available. If not available pass null or an empty string</param>
            <param name="tokenSecret">The token secret, if available. If not available pass null or an empty string</param>
            <param name="httpMethod">The http method used. Must be a valid HTTP method verb (POST,GET,PUT, etc)</param>
            <param name="timeStamp">Generated Timestamp for the signature</param>
            <param name="nonce">Random Implementantion of a number for the signature</param>
            <param name="callback">Callback url,used to generate the signature</param>
            <param name="verifier">Verifier that you receive after the authorization step. Use String.Empty if you dont have it yet.</param>
            <param name="signatureType">The type of signature to use</param>
            <param name="normalizedUrl">The normalized url to be used for the next requests</param>
            <param name="normalizedRequestParameters">The normalized request parameters to be used for next requests</param>
            <returns>A base64 string of the hash value</returns>
        </member>
        <member name="M:WebUtilsLib.OAuthBase.GenerateTimeStamp">
            <summary>
            Generates a Timestamp to be used on the 
            signature creating
            </summary>
            <returns>String with the timestamp</returns>
        </member>
        <member name="M:WebUtilsLib.OAuthBase.GenerateNonce">
            <summary>
            Generates a nonce random number
            to be used in the signature
            </summary>
            <returns>Random number</returns>
        </member>
        <member name="T:WebUtilsLib.OAuthBase.SignatureTypes">
            <summary>
            Provides a predefined set of algorithms that are supported officially by the protocol
            </summary>
        </member>
        <member name="F:WebUtilsLib.OAuthBase.SignatureTypes.HMACSHA1">
            <summary>
            HMACSHA-1 Signature
            </summary>
        </member>
        <member name="F:WebUtilsLib.OAuthBase.SignatureTypes.PLAINTEXT">
            <summary>
            PlainText, no change in the signature method
            </summary>
        </member>
        <member name="F:WebUtilsLib.OAuthBase.SignatureTypes.RSASHA1">
            <summary>
            RSASHA-1 Signature
            </summary>
        </member>
        <member name="M:WebUtilsLib.OAuth.GetRequestToken">
            <summary>
            First Step of oAuth Process.
            Get Token and TokenSecret values
            and store as attributes
            </summary>
        </member>
        <member name="M:WebUtilsLib.OAuth.GetAuthorizationUrl">
            <summary>
            Generates the URL used for the Authorization
            step and stores it inside this
            instance
            </summary>
            <returns>Generated URL For the Request</returns>
        </member>
        <member name="M:WebUtilsLib.OAuth.GetAccessToken">
            <summary>
            Uses All the Tokens and Verifier
            obtained in the past steps
            (RequestToken and AuthorizeToken)
            to get the AccessTokens.
            </summary>
        </member>
        <member name="M:WebUtilsLib.OAuth.GenerateParametersForRequest(System.String,System.String)">
            <summary>
            Generates the PostData used
            for obtaining tokens.
            
            Override this method if your service needs any other logic for generating these
            parameters.
            </summary>
            <param name="urlOfRequest">Url of the Request.</param>
            <param name="HttpMethod">HTTPMethod Verb, "POST",for instance</param>
            <returns></returns>
        </member>
        <member name="M:WebUtilsLib.OAuth.ParseTokensFromResponse(System.String)">
            <summary>
            Extract Tokens from the Web Response String
            </summary>
            <param name="response">Query String containing token values for parsing</param>
        </member>
        <member name="M:WebUtilsLib.OAuth.ClearInformation">
            <summary>
            Erases all the previous stored values for
            Api Key,Api Secret Key,Token,Token Secret,
            Verifier,Api Host,Callback,Signature and URLS
            for Request Token,User Authorization and Access Token.
            </summary>
        </member>
        <member name="P:WebUtilsLib.OAuth.RequestTokenUrl">
            <summary>
            URL used for the First Step of the 
            OAuth Flow, Getting Request Tokens.
            </summary>
        </member>
        <member name="P:WebUtilsLib.OAuth.AuthenticateUserUrl">
            <summary>
            URL used for the Second Step of the 
            OAuth Flow,Authenticating a User
            </summary>
        </member>
        <member name="P:WebUtilsLib.OAuth.FullAuthenticationUrl">
            <summary>
            Authentication URL appended with
            the token obtained in the RequestToken
            step.
            </summary>
        </member>
        <member name="P:WebUtilsLib.OAuth.AccessTokenUrl">
            <summary>
            URL Used in the third step of the 
            OAuth Flow,Getting AccessTokens
            </summary>
        </member>
        <member name="P:WebUtilsLib.OAuth.APIHost">
            <summary>
            Host used in the requests
            for Tokens
            </summary>
        </member>
        <member name="P:WebUtilsLib.OAuth.Callback">
            <summary>
            Callback url. 
            Request will redirect user to this 
            Address after the Request
            is complete.
            </summary>
        </member>
        <member name="P:WebUtilsLib.OAuth.APIKey">
            <summary>
            Key for the Application 
            or consumer obtained 
            in the website of the service 
            selected.
            </summary>
        </member>
        <member name="P:WebUtilsLib.OAuth.APISecretKey">
            <summary>
            Secret Key for the Application 
            or consumer obtained 
            in the website of the service 
            selected.
            </summary>
        </member>
        <member name="P:WebUtilsLib.OAuth.Token">
            <summary>
            Token obtained in the First
            and Third Step of the OAuth
            Flow
            </summary>
        </member>
        <member name="P:WebUtilsLib.OAuth.TokenSecret">
            <summary>
            TokenSecret obtained in the First
            and Third Step of the OAuth
            Flow
            </summary>
        </member>
        <member name="P:WebUtilsLib.OAuth.Verifier">
            <summary>
            Verifier obtained in the second
            and Third Step of the OAuth
            Flow
            </summary>
        </member>
        <member name="T:WebUtilsLib.QueryParameter">
            <summary>
            Provides an internal structure to sort the query parameter
            </summary>
        </member>
        <member name="M:WebUtilsLib.QueryParameter.#ctor(System.String,System.String)">
            <summary>
            Class Construtor
            </summary>
            <param name="key">Key for the Parameter</param>
            <param name="value">Value of this parameter</param>
        </member>
        <member name="P:WebUtilsLib.QueryParameter.Key">
            <summary>
            Getter property for 
            the Key attribute
            </summary>
        </member>
        <member name="P:WebUtilsLib.QueryParameter.Value">
            <summary>
            Getter property for the
            Valye attribute
            </summary>
        </member>
        <member name="T:WebUtilsLib.QueryParameterComparer">
            <summary>
            Implementation of the IComparer interface used to sort
            OAuth parameters
            </summary>
        </member>
        <member name="M:WebUtilsLib.QueryParameterComparer.Compare(WebUtilsLib.QueryParameter,WebUtilsLib.QueryParameter)">
            <summary>
            Compares Both Parameters
            </summary>
            <param name="x">First element to be compared</param>
            <param name="y">Second element to be compared</param>
            <returns>A number that indicates the lexical relationship between the two comparands</returns>
        </member>
        <member name="T:WebUtilsLib.WebRequestsPreset">
            <summary>
            Some common headers configuration shortcuts.<para/>
            These rules changes ContentType, Accept and Encoding.
            </summary>
        </member>
        <member name="F:WebUtilsLib.WebRequestsPreset.Default">
            <summary>Default preset is the same as Forms</summary>
        </member>
        <member name="F:WebUtilsLib.WebRequestsPreset.Forms">
            <summary>Forms uses "application/x-www-form-urlencoded" and iso-8859-1</summary>
        </member>
        <member name="F:WebUtilsLib.WebRequestsPreset.Json">
            <summary>Json uses "application/json" and utf-8 with ContentType encoding detection</summary>
        </member>
        <member name="F:WebUtilsLib.WebRequestsPreset.Xml">
            <summary>Xml uses "text/xml" and utf-8</summary>
        </member>
        <member name="T:WebUtilsLib.WebRequests">
            <summary>
            Web helper for easier http requests.<para/>
            </summary>
        </member>
        <member name="M:WebUtilsLib.WebRequests.#ctor">
            <summary>
            Class Constructor
            </summary>        
        </member>
        <member name="M:WebUtilsLib.WebRequests.#ctor(WebUtilsLib.WebRequestsPreset,System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Nullable{System.Int32})">
            <summary>
            Class Constructor with a header preset information.
            </summary>
            <param name="preset">The header preset.</param>
            <param name="opTimeout">The operation timeout in milliseconds. Use null to keep the default library values.<para/>This affects all timeouts (connection, read/write, operation)</param>
            <param name="keepAlive">The keep alive. Use null to keep the default library value.</param>
            <param name="bufferSize">Size of the buffer in bytes. Use null to keep the default library value.</param>
        </member>
        <member name="M:WebUtilsLib.WebRequests.SetWebRequestPreset(WebUtilsLib.WebRequestsPreset,System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Nullable{System.Int32})">
            <summary>
            Configures the Web Request instance with a header preset information.
            </summary>
            <param name="preset">The header preset.</param>
            <param name="opTimeout">The operation timeout in milliseconds. Use null to keep the default library values.<para/>This affects all timeouts (connection, read/write, operation)</param>
            <param name="keepAlive">The keep alive. Use null to keep the default library value.</param>
            <param name="bufferSize">Size of the buffer in bytes. Use null to keep the default library value.</param>
        </member>
        <member name="M:WebUtilsLib.WebRequests.Dispose">
            <summary>
            Calls reset.
            </summary>
        </member>
        <member name="M:WebUtilsLib.WebRequests.ClearCookies">
            <summary>
            Clear the content of the 
            Cookie Container class used in 
            the requests
            </summary>
        </member>
        <member name="M:WebUtilsLib.WebRequests.ClearError">
            <summary>
            Clears the last error variable
            </summary>
        </member>
        <member name="M:WebUtilsLib.WebRequests.TurnOffCertificateValidator">
            <summary>
            Ignored any certificate validation issued by the request.
            This usually solves Validation/Authentication errors
            such as "access denied" or "Forbidden"
            </summary>
        </member>
        <member name="M:WebUtilsLib.WebRequests.Reset">
            <summary>
            Resets this instance for reuse.<para/>
            This is called automatically for every Query method call.
            </summary>
            <remarks>
            This Reset method doesn't clear the cookie contanier.
            </remarks>
        </member>
        <member name="M:WebUtilsLib.WebRequests.Reset(System.Boolean)">
            <summary>
            Resets this instance for reuse with the option to clear request cookies.
            </summary>
            <param name="clearCookies">The clear cookies.</param>
        </member>
        <member name="M:WebUtilsLib.WebRequests.Get(System.String,System.Boolean)">
            <summary>
            Executes a GET request. <para/>
            creating an HttpWebRequest 
            object based on previously 
            set attributes
            
            OBS: Caso esta implementação dê algum problema, fazer o seguinte:
             1. Ler todos os bytes do stream, bloco a bloco, mas sem fazer encoding, só ler os bytes
             2. Guardar os bytes e fazer encoding deles para string, usando o m_encoding
             3. Procurar a tag de encoding, e , se o encoding for diferente do m_encoding, fazer encoding dos bytes
             guardados, para o encoding da página
             
            </summary>
            <returns>Response of the Request. Empty string if any error ocurred.</returns>
        </member>
        <member name="M:WebUtilsLib.WebRequests.Post(System.String,System.String,System.Boolean)">
            <summary>
            Executes a POST request.
            creating an HttpWebRequest
            object based on previously
            set attributes.
            </summary>
            <param name="url">The URL.</param>
            <param name="postData">Parameters the Post Request</param>
            <param name="throwOnError">The throw on error.</param>
            <returns>Response of the Request. Empty string if any error ocurred.</returns>
        </member>
        <member name="M:WebUtilsLib.WebRequests.Put(System.String,System.String,System.Boolean)">
            <summary>
            Executes a PUT request.
            </summary>
            <param name="url">The URL.</param>
            <param name="data">The request data.</param>
            <param name="throwOnError">The throw on error.</param>
            <returns></returns>
        </member>
        <member name="M:WebUtilsLib.WebRequests.Delete(System.String,System.String,System.Boolean)">
            <summary>
            Executes a DELETE request.
            </summary>
            <param name="url">The URL.</param>
            <param name="data">The request data.</param>
            <param name="throwOnError">The throw on error.</param>
            <returns></returns>
        </member>
        <member name="M:WebUtilsLib.WebRequests.ResponseGet(System.String,System.Boolean)">
            <summary>
            Executes a GET request and returns the response object (WebResponse)
            instead of the resulting text/html/json/xml as string.
            of the request
            </summary>
            <param name="url">Url for the request</param>
            <param name="throwOnError"></param>
            <returns>Web response of the get</returns>
        </member>
        <member name="M:WebUtilsLib.WebRequests.ResponsePost(System.String,System.String,System.Boolean)">
            <summary>
            Executes a POST request and returns the response object (WebResponse)
            instead of the resulting text/html/json/xml as string.
            </summary>
            <param name="url">Url of the request</param>
            <param name="postData">The post data.</param>
            <param name="throwOnError">The throw on error.</param>
            <returns>WebResponse of the post</returns>
        </member>
        <member name="M:WebUtilsLib.WebRequests.ResponsePut(System.String,System.String,System.Boolean)">
            <summary>
            Executes a PUT request and returns the response object (WebResponse)
            instead of the resulting text/html/json/xml as string.
            </summary>
            <param name="url">Url of the request</param>
            <param name="data">The request data.</param>
            <param name="throwOnError">The throw on error.</param>
            <returns>WebResponse of the post</returns>
        </member>
        <member name="M:WebUtilsLib.WebRequests.ResponseDelete(System.String,System.String,System.Boolean)">
            <summary>
            Executes a DELETE request and returns the response object (WebResponse)
            instead of the resulting text/html/json/xml as string.
            </summary>
            <param name="url">Url of the request</param>
            <param name="data">The request data.</param>
            <param name="throwOnError">The throw on error.</param>
            <returns>WebResponse of the post</returns>
        </member>
        <member name="M:WebUtilsLib.WebRequests.GetAsync(System.String,System.Threading.CancellationToken,System.Boolean)">
            <summary>
            Executes a GET request in async mode.
            </summary>
            <param name="url">The URL.</param>
            <param name="ct">The Cancellation Token.</param>
            <param name="throwOnError">The throw on error.</param>
            <returns></returns>
        </member>
        <member name="M:WebUtilsLib.WebRequests.PostAsync(System.String,System.String,System.Threading.CancellationToken,System.Boolean)">
            <summary>
            Executes a POST request in async mode.
            </summary>
            <param name="url">The URL.</param>
            <param name="postData">The post data.</param>
            <param name="ct">The cancellation token</param>
            <param name="throwOnError">The throw on error.</param>
            <returns></returns>
        </member>
        <member name="M:WebUtilsLib.WebRequests.PutAsync(System.String,System.String,System.Threading.CancellationToken,System.Boolean)">
            <summary>
            Executes a PUT request in async mode.
            </summary>
            <param name="url">The URL.</param>
            <param name="data">The request data.</param>
            <param name="ct">The cancellation token</param>
            <param name="throwOnError">The throw on error.</param>
            <returns></returns>
        </member>
        <member name="M:WebUtilsLib.WebRequests.DeleteAsync(System.String,System.String,System.Threading.CancellationToken,System.Boolean)">
            <summary>
            Executes a DELETE request in async mode.
            </summary>
            <param name="url">The URL.</param>
            <param name="data">The request data.</param>
            <param name="ct">The cancellation token</param>
            <param name="throwOnError">The throw on error.</param>
            <returns></returns>
        </member>
        <member name="M:WebUtilsLib.WebRequests.ResponseGetAsync(System.String,System.Threading.CancellationToken,System.Boolean)">
            <summary>
            Executes a GET request and returns the response object (WebResponse)
            instead of the resulting text/html/json/xml as string.
            </summary>
            <param name="url">The URL.</param>
            <param name="ct">The cancellation token</param>
            <param name="throwOnError">The throw on error.</param>
            <returns></returns>
        </member>
        <member name="M:WebUtilsLib.WebRequests.ResponsePostAsync(System.String,System.String,System.Threading.CancellationToken,System.Boolean)">
            <summary>
            Executes a POST request and returns the response object (WebResponse)
            instead of the resulting text/html/json/xml as string.
            </summary>
            <param name="url">The URL.</param>
            <param name="postData">The post data.</param>
            <param name="ct">The cancellation token</param>
            <param name="throwOnError">The throw on error.</param>
            <returns></returns>
        </member>
        <member name="M:WebUtilsLib.WebRequests.ResponsePutAsync(System.String,System.String,System.Threading.CancellationToken,System.Boolean)">
            <summary>
            Executes a PUT request and returns the response object (WebResponse)
            instead of the resulting text/html/json/xml as string.
            </summary>
            <param name="url">The URL.</param>
            <param name="data">The request data.</param>
            <param name="ct">The cancellation token</param>
            <param name="throwOnError">The throw on error.</param>
            <returns></returns>
        </member>
        <member name="M:WebUtilsLib.WebRequests.ResponseDeleteAsync(System.String,System.String,System.Threading.CancellationToken,System.Boolean)">
            <summary>
            Executes a DELETE request and returns the response object (WebResponse)
            instead of the resulting text/html/json/xml as string.
            </summary>
            <param name="url">The URL.</param>
            <param name="data">The request data.</param>
            <param name="ct">The cancellation token</param>
            <param name="throwOnError">The throw on error.</param>
            <returns></returns>
        </member>
        <member name="M:WebUtilsLib.WebRequests.GetBytes(System.String,System.Boolean)">
            <summary>
            Gets the stream
            </summary>
            <param name="url">The URL.</param>
            <param name="throwOnError">The throw on error.</param>
            <returns>True if no error ocurred</returns>
        </member>
        <member name="M:WebUtilsLib.WebRequests.GetBitmap(System.String,System.Boolean)">
            <summary>
            Gets the web response
            as a Bitmap
            </summary>
            <param name="url">The URL.</param>
            <param name="throwOnError">The throw on error.</param>
            <returns>Bitmap response of the web request</returns>
        </member>
        <member name="M:WebUtilsLib.WebRequests.QueryResponse(System.String,System.String,System.Collections.Generic.IEnumerable{System.Tuple{System.Byte[],System.Int32}},System.Text.Encoding,System.Int64,System.String,System.Boolean)">
            <summary>
            Executes a request and returns a WebResponse object.
            </summary>
            <param name="verb">The verb (GET, POST, PUT, DELETE).</param>
            <param name="url">The URL.</param>
            <param name="contentData">The content data to be send in request body.</param>
            <param name="currentEncode">The current encode.</param>
            <param name="contentLength">Length of the content in bytes to be send in HTTP content-length header.</param>
            <param name="contentType">[optional] content-type HTTP parameter.</param>
            <param name="throwOnError">The throw on error.</param>
        </member>
        <member name="M:WebUtilsLib.WebRequests.QueryResponse(System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Executes a request and returns a WebResponse object.
            </summary>
            <param name="verb">The verb (GET, POST, PUT, DELETE).</param>
            <param name="url">The URL.</param>
            <param name="contentData">The content data to be send in request body.</param>
            <param name="contentType">[optional] content-type HTTP parameter.</param>
            <param name="throwOnError">The throw on error.</param>
        </member>
        <member name="M:WebUtilsLib.WebRequests.QueryResponse(System.String,System.String,System.Collections.Generic.IList{System.String},System.Boolean)">
            <summary>
            Executes a request and returns a WebResponse object.
            </summary>
            <param name="verb">The verb (GET, POST, PUT, DELETE).</param>
            <param name="url">The URL.</param>
            <param name="contentData">The content data to be send in request body.</param>
            <param name="throwOnError">The throw on error.</param>
        </member>
        <member name="M:WebUtilsLib.WebRequests.Query(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Executes a request and returns the response content as string.
            </summary>
            <param name="verb">The verb (GET, POST, PUT, DELETE).</param>
            <param name="url">The URL.</param>
            <param name="contentData">The content data to be send in request body.</param>
            <param name="throwOnError">The throw on error.</param>
        </member>
        <member name="M:WebUtilsLib.WebRequests.Query(System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Executes a request and returns the response content as string.
            </summary>
            <param name="verb">The verb (GET, POST, PUT, DELETE).</param>
            <param name="url">The URL.</param>
            <param name="contentData">The content data to be send in request body.</param>
            <param name="contentType">[optional] content-type HTTP parameter.</param>
            <param name="throwOnError">The throw on error.</param>
        </member>
        <member name="M:WebUtilsLib.WebRequests.Query(System.String,System.String,System.Collections.Generic.IList{System.String},System.Boolean)">
            <summary>
            Executes a request and returns the response content as string.
            </summary>
            <param name="verb">The verb (GET, POST, PUT, DELETE).</param>
            <param name="url">The URL.</param>
            <param name="contentData">The content data to be send in request body.</param>
            <param name="throwOnError">The throw on error.</param>
        </member>
        <member name="M:WebUtilsLib.WebRequests.Query(System.String,System.String,System.Collections.Generic.IEnumerable{System.String},System.Int64,System.Boolean)">
            <summary>
            Executes a request and returns the response content as string.
            </summary>
            <param name="verb">The verb (GET, POST, PUT, DELETE).</param>
            <param name="url">The URL.</param>
            <param name="contentData">The content data to be send in request body.</param>
            <param name="contentLength">Length of the content in bytes to be send in HTTP content-length header.</param>
            <param name="throwOnError">The throw on error.</param>
        </member>
        <member name="M:WebUtilsLib.WebRequests.Query(System.String,System.String,System.Collections.Generic.IEnumerable{System.Tuple{System.Byte[],System.Int32}},System.Int64,System.String,System.Boolean)">
            <summary>
            Executes a request and returns the response content as string.
            </summary>
            <param name="verb">The verb (GET, POST, PUT, DELETE).</param>
            <param name="url">The URL.</param>
            <param name="contentData">The content data to be send in request body.</param>
            <param name="contentLength">Length of the content in bytes to be send in HTTP content-length header.</param>
            <param name="contentType">[optional] content-type HTTP parameter.</param>
            <param name="throwOnError">The throw on error.</param>
            <returns></returns>
        </member>
        <member name="M:WebUtilsLib.WebRequests.ResolveURL(System.String)">
            <summary>
            Execute a HEAD request to resolve any redirects and get the final URL .
            </summary>
            <param name="url">The URL.</param>
            <returns></returns>
        </member>
        <member name="M:WebUtilsLib.WebRequests.ReadRequestResponseUntilMaxSize(System.Net.HttpWebRequest,System.Text.StringBuilder,System.Text.Encoding)">
            <summary>
            Reads the request response, until the max size
            is reached or until the end of the stream.
            </summary>
            <param name="request">The request</param>
            <param name="htmlBuilder">The HTML builder</param>
            <param name="defaultEncoding">The default encoding</param>
            <returns>StringBuilder with the encoded stream or Null in case of error</returns>
        </member>
        <member name="M:WebUtilsLib.WebRequests.ReadRequestResponseUntilMaxSize(System.Net.HttpWebRequest,System.Net.HttpWebResponse,System.Text.StringBuilder,System.Text.Encoding)">
            <summary>
            Reads the request response, until the max size
            is reached or until the end of the stream.
            </summary>
            <param name="request">HttpWebRequest Object</param>
            <param name="webResponse">HttpWebResponse Object</param>
            <param name="htmlBuilder">The HTML builder</param>
            <param name="defaultEncoding">The default encoding</param>
            <returns>StringBuilder with the encoded stream or Null in case of error</returns>
        </member>
        <member name="M:WebUtilsLib.WebRequests.GetBytesAsync(System.String,System.Threading.CancellationToken,System.Boolean)">
            <summary>
            Gets the stream
            </summary>
            <param name="url">The URL.</param>
            <param name="ct">The Cancellation Token.</param>
            <param name="throwOnError">The throw on error.</param>
            <returns>True if no error ocurred</returns>
        </member>
        <member name="M:WebUtilsLib.WebRequests.QueryResponseAsync(System.String,System.String,System.Collections.Generic.IEnumerable{System.Tuple{System.Byte[],System.Int32}},System.Text.Encoding,System.Int64,System.String,System.Threading.CancellationToken,System.Boolean)">
            <summary>
            Executes a request and returns a WebResponse object.
            </summary>
            <param name="verb">The verb (GET, POST, PUT, DELETE).</param>
            <param name="url">The URL.</param>
            <param name="contentData">The content data to be send in request body.</param>
            <param name="currentEncode">The current encode.</param>
            <param name="contentLength">Length of the content in bytes to be send in HTTP content-length header.</param>
            <param name="contentType">[optional] content-type HTTP parameter.</param>
            <param name="ct">The Cancellation token.</param>
            <param name="throwOnError">The throw on error.</param>
        </member>
        <member name="M:WebUtilsLib.WebRequests.QueryResponseAsync(System.String,System.String,System.String,System.String,System.Threading.CancellationToken,System.Boolean)">
            <summary>
            Executes a request and returns a WebResponse object.
            </summary>
            <param name="verb">The verb (GET, POST, PUT, DELETE).</param>
            <param name="url">The URL.</param>
            <param name="contentData">The content data to be send in request body.</param>
            <param name="contentType">[optional] content-type HTTP parameter.</param>
            <param name="ct">The Cancellation token.</param>
            <param name="throwOnError">The throw on error.</param>
        </member>
        <member name="M:WebUtilsLib.WebRequests.QueryResponseAsync(System.String,System.String,System.Collections.Generic.IList{System.String},System.Threading.CancellationToken,System.Boolean)">
            <summary>
            Executes a request and returns a WebResponse object.
            </summary>
            <param name="verb">The verb (GET, POST, PUT, DELETE).</param>
            <param name="url">The URL.</param>
            <param name="contentData">The content data to be send in request body.</param>
            <param name="ct">The Cancellation token.</param>
            <param name="throwOnError">The throw on error.</param>
        </member>
        <member name="M:WebUtilsLib.WebRequests.QueryAsync(System.String,System.String,System.String,System.Threading.CancellationToken,System.Boolean)">
            <summary>
            Executes a request and returns the response content as string in async mode.
            </summary>
            <param name="verb">The verb (GET, POST, PUT, DELETE).</param>
            <param name="url">The URL.</param>
            <param name="contentData">The content data to be send in request body.</param>
            <param name="ct">The Cancellation token.</param>
            <param name="throwOnError">The throw on error.</param>
        </member>
        <member name="M:WebUtilsLib.WebRequests.QueryAsync(System.String,System.String,System.String,System.String,System.Threading.CancellationToken,System.Boolean)">
            <summary>
            Executes a request and returns the response content as string in async mode.
            </summary>
            <param name="verb">The verb (GET, POST, PUT, DELETE).</param>
            <param name="url">The URL.</param>
            <param name="contentData">The content data to be send in request body.</param>
            <param name="contentType">[optional] content-type HTTP parameter.</param>
            <param name="ct">The Cancellation token.</param>
            <param name="throwOnError">The throw on error.</param>
        </member>
        <member name="M:WebUtilsLib.WebRequests.QueryAsync(System.String,System.String,System.Collections.Generic.IList{System.String},System.Threading.CancellationToken,System.Boolean)">
            <summary>
            Executes a request and returns the response content as string in async mode.
            </summary>
            <param name="verb">The verb (GET, POST, PUT, DELETE).</param>
            <param name="url">The URL.</param>
            <param name="contentData">The content data to be send in request body.</param>
            <param name="ct">The Cancellation token.</param>
            <param name="throwOnError">The throw on error.</param>
        </member>
        <member name="M:WebUtilsLib.WebRequests.QueryAsync(System.String,System.String,System.Collections.Generic.IEnumerable{System.String},System.Int64,System.Threading.CancellationToken,System.Boolean)">
            <summary>
            Executes a request and returns the response content as string in async mode.
            </summary>
            <param name="verb">The verb (GET, POST, PUT, DELETE).</param>
            <param name="url">The URL.</param>
            <param name="contentData">The content data to be send in request body.</param>
            <param name="contentLength">Length of the content in bytes to be send in HTTP content-length header.</param>
            <param name="ct">The Cancellation token.</param>
            <param name="throwOnError">The throw on error.</param>
            <returns></returns>
        </member>
        <member name="M:WebUtilsLib.WebRequests.QueryAsync(System.String,System.String,System.Collections.Generic.IEnumerable{System.Tuple{System.Byte[],System.Int32}},System.Int64,System.String,System.Threading.CancellationToken,System.Boolean)">
            <summary>
            Executes a request and returns the response content as string in async mode.
            </summary>
            <param name="verb">The verb (GET, POST, PUT, DELETE).</param>
            <param name="url">The URL.</param>
            <param name="contentData">The content data to be send in request body.</param>
            <param name="contentLength">Length of the content in bytes to be send in HTTP content-length header.</param>
            <param name="contentType">[optional] content-type HTTP parameter.</param>
            <param name="ct">The Cancellation token.</param>
            <param name="throwOnError">The throw on error.</param>
        </member>
        <member name="M:WebUtilsLib.WebRequests.ReadRequestResponseUntilMaxSizeAsync(System.Net.HttpWebRequest,System.Net.HttpWebResponse,System.Threading.CancellationToken,System.Text.StringBuilder,System.Text.Encoding)">
            <summary>
            Reads the request response, until the max size
            is reached or until the end of the stream.
            </summary>
            <param name="request">HttpWebRequest Object</param>
            <param name="webResponse">HttpWebResponse Object</param>
            <param name="ct">The Cancellation token.</param>
            <param name="htmlBuilder">The HTML builder</param>
            <param name="defaultEncoding">The default encoding</param>
            <returns>StringBuilder with the encoded stream or Null in case of error</returns>
        </member>
        <member name="M:WebUtilsLib.WebRequests.SanityCheck_EmptyUrl(System.String,System.Boolean)">
            <summary>
            Sanities the check_ empty URL.
            </summary>
            <param name="url">The URL.</param>
            <param name="throwOnError">The throw on error.</param>
            <returns>True for validation ERROR!</returns>
        </member>
        <member name="M:WebUtilsLib.WebRequests.IdentifyEncodingByMetaTag(System.String)">
            <summary>
            Tries to find values
            from <meta/> tags that refer to the encoding used on the page
            </summary>
            <param name="response">Html Page</param>
            <returns>Encoding found on the page, null if none found</returns>
        </member>
        <member name="M:WebUtilsLib.WebRequests.GetMetaTags(System.String)">
            <summary>
            Identifies the encoding used on the page
            looking after the <meta/> tags.<para/>
            In case no meta tag was found, the returned
            encoding is the default one
            </summary>
            <param name="response">Html of the page received</param>
            <returns>Found encoding of the page, if no encoding was found, returns the default (attribute) one</returns>        
        </member>
        <member name="M:WebUtilsLib.WebRequests.GetEncodingValue(System.String,System.String)">
            <summary>
            Extracts from the tagText the value 
            of the attribute received as argument
            </summary>
            <param name="tagText">Complete text of the tag</param>
            <param name="attributeName">Name of the attribute whose value will be returned</param>
            <returns>Value of the attribute maped by the name received</returns>
        </member>
        <member name="M:WebUtilsLib.WebRequests.CalculateContentLength(System.String,System.Text.Encoding)">
            <summary>
            Calculates the length in bytes of string content.
            </summary>
            <param name="contentData">The content data.</param>
            <param name="encoding">The encoding.</param>
        </member>
        <member name="M:WebUtilsLib.WebRequests.ParseRequestContentData(System.String,System.Text.Encoding,System.Int32)">
            <summary>
            Parses the request content data.
            </summary>
            <param name="contentData">The content data.</param>
            <param name="encoding">The encoding.</param>
            <param name="contentByteLength">[optional] Content length in bytes.</param>
            <returns></returns>
        </member>
        <member name="M:WebUtilsLib.WebRequests.AssembleFullRedirectUrl(System.String,System.String)">
            <summary>
            Checks if the location url is a relative or absolute one.
            If its a relative url, the method will join it with the url
            parameter in order to build a absolute one.
            </summary>
            <param name="url">URL used on the request</param>
            <param name="responseLocation">Location header of the response</param>
            <returns>Absolute url for the redirect</returns>
        </member>
        <member name="P:WebUtilsLib.WebRequests.CookieJar">
            <summary>
            Gets or sets the cookies associated with the request.
            </summary>
        </member>
        <member name="P:WebUtilsLib.WebRequests.InternalWebRequest">
            <summary>
            The internal web request object.
            </summary>
        </member>
        <member name="P:WebUtilsLib.WebRequests.EncodingDetection">
            <summary>
            Gets or sets the encoding detection method <see cref="T:WebUtilsLib.WebRequests.CharsetDetection"/>.
            </summary>
        </member>
        <member name="P:WebUtilsLib.WebRequests.BufferSize">
            <summary>
            Internal buffer size for read and write operations.<para/>
            Defaults to 8 Kb.
            </summary>
        </member>
        <member name="P:WebUtilsLib.WebRequests.UserAgent">
            <summary>
            Gets or sets the value of the User-agent HTTP header.
            </summary>
        </member>
        <member name="P:WebUtilsLib.WebRequests.Accept">
            <summary>
            Gets or sets the value of the Accept HTTP header.
            </summary>
        </member>
        <member name="P:WebUtilsLib.WebRequests.MaxResponseSize">
            <summary>
            Gets or Sets the Maximum size of a response.<para/>
            Defaults to 1 Gb.
            </summary>
        </member>
        <member name="P:WebUtilsLib.WebRequests.KeepAlive">
            <summary>
            Connection KeepAlive attribute (HttpWebRequest).<para/>
            Gets or sets a value that indicates whether to make a persistent connection to the Internet resource.<para/>
            Defaults to false.
            </summary>
        </member>
        <member name="P:WebUtilsLib.WebRequests.Proxy">
            <summary>
            WebProxy attribute
            </summary>
        </member>
        <member name="P:WebUtilsLib.WebRequests.Credentials">
            <summary>
            Network credentials attribute for 
            proxy/network authentication
            </summary>
        </member>
        <member name="P:WebUtilsLib.WebRequests.Host">
            <summary>
            Host attribute
            Of the HttpWebRequest
            </summary>
        </member>
        <member name="P:WebUtilsLib.WebRequests.ContentType">
            <summary>
            ContentType attribute Of the HttpWebRequest.<para/>
            Gets or sets the value of the Content-type HTTP header.
            </summary>
        </member>
        <member name="P:WebUtilsLib.WebRequests.Encoding">
            <summary>
            Encoding to be used for every request and response decoding.<para/>
            Use CharserDetection to DefaultEncoding to force this ecoding usage.
            </summary>
        </member>
        <member name="P:WebUtilsLib.WebRequests.LastPageEncoding">
            <summary>
            Encoding used on the page (response result) of the last
            request executed
            </summary>
        </member>
        <member name="P:WebUtilsLib.WebRequests.Referer">
            <summary>
            Referer attribute
            Of the HttpWebRequest
            </summary>
        </member>
        <member name="P:WebUtilsLib.WebRequests.Timeout">
            <summary>
            HttpWebRequest timeout for establishing a working connection in milliseconds.<para/>
            Defaults to 10000 (10 seconds).<para/>
            Configures the time for the server to respond to a request, not the amount of time to wait for the server to respond and send down all of the data.
            </summary>
        </member>
        <member name="P:WebUtilsLib.WebRequests.ReadWriteTimeout">
            <summary>
            HttpWebRequest Read and Write Timeout in milliseconds.<para/>
            Defaults to 30000 (30 seconds).<para/>
            Configures the amount of time to allow for completion of a stream read or write.
            </summary>
        </member>
        <member name="P:WebUtilsLib.WebRequests.OperationTimeout">
            <summary>
            Timeout of the request as a whole in milliseconds. If any Http request
            takes longer than this timeout, the methods will abort. <para/>
            This includes the Timeout and ReadWriteTimeout properties.
            </summary>
        </member>
        <member name="P:WebUtilsLib.WebRequests.AllowAutoRedirect">
            <summary>
            AllowAutoRedirect attribute
            Of the HttpWebRequest
            </summary>
        </member>
        <member name="P:WebUtilsLib.WebRequests.AutomaticDecompression">
            <summary>
            Gets or Sets the Automatic Decompression
            attribute
            </summary>
        </member>
        <member name="P:WebUtilsLib.WebRequests.Origin">
            <summary>
            Origin attribute
            Of the HttpWebRequest
            </summary>
        </member>
        <member name="P:WebUtilsLib.WebRequests.Headers">
            <summary>
            Headers attribute
            of the HttpWebRequest
            </summary>
        </member>
        <member name="P:WebUtilsLib.WebRequests.Error">
            <summary>
            Message containing the
            last error that ocurred.
            Can be reseted by using ClearError
            Method
            </summary>
        </member>
        <member name="P:WebUtilsLib.WebRequests.StatusCode">
            <summary>
            Check documentation for http status codes
            </summary>
        </member>
        <member name="P:WebUtilsLib.WebRequests.RedirectLocation">
            <summary>
            Getter for redirect location if there was any
            </summary>
        </member>
        <member name="P:WebUtilsLib.WebRequests.FullRedirectLocation">
            <summary>
            Getter for the m_fullredirectlocation attribute
            </summary>
        </member>
        <member name="P:WebUtilsLib.WebRequests.InternalResponseBuffer">
            <summary>
            Gets the internal stringbuilder with response content.
            </summary>
        </member>
        <member name="P:WebUtilsLib.WebRequests.MaximumRedirects">
            <summary>
            Maximum Automatic Redirections
            </summary>
        </member>
        <member name="P:WebUtilsLib.WebRequests.Expect100Continue">
            <summary>
            Adds "Expect: 100-Continue" header to the request.
            Disabled by default, since not all web servers implements it correctly (i.e. Apache).
            </summary>
        </member>
        <member name="P:WebUtilsLib.WebRequests.Authorization">
            <summary>
            Gets or sets the Authorization header, which specifies the credentials that the client
            presents in order to authenticate itself to the server.</summary>
        </member>
        <member name="P:WebUtilsLib.WebRequests.InternalWebResponse">
            <summary>
            Gets or sets the HttpWebResponse object of the last Query method call.
            </summary>
        </member>
        <member name="P:WebUtilsLib.WebRequests.Result">
            <summary>
            Success or failure of the operation.<para/>
            This property checks if the Error property IsNullOrEmpty.
            </summary>
        </member>
        <member name="P:WebUtilsLib.WebRequests.EnableNonSuccessResponse">
            <summary>
            By Default WebRequest aborts if it receives a non-success status code.<para/>
            If you want to continue and read the response stream in case of errors, set this property to true.
            </summary>
        </member>
        <member name="T:WebUtilsLib.WebRequests.CharsetDetection">
            <summary>
            
            The top priority for charset detection always goes to Header["Content-Type"]
            
            [MozillaCharsetDetection]
            This detection is complete, in case of error it will run HtmlCharsetTag, and if still has errors, we use default
            
            [HtmlCharsetTag]
            Search for charset tags in HTML, in case of error, we use default encoding
            
            [DefaultCharset]
            Use the charset provider by user. See property Encoding in WebRequest.
            
            [ForceMozillaCharsetDetection]
            Use this for testing only, it will ignore Header["Content-Type"] and try to detect with MozillaCharsetDetection
            </summary>
        </member>
        <member name="F:WebUtilsLib.WebRequests.CharsetDetection.MozillaCharsetDetection">
            <summary>
            Try to detect the page encoding using a character based heuristic. <para/>
            If not found, fallback to HtmlCharsetTag, and then to DefaultCharset.
            </summary>
        </member>
        <member name="F:WebUtilsLib.WebRequests.CharsetDetection.HtmlCharsetTag">
            <summary>
            Try to find the html charset meta tag.<para/>
            If not found, fallback to DefaultCharset.
            </summary>
        </member>
        <member name="F:WebUtilsLib.WebRequests.CharsetDetection.DefaultCharset">
            <summary>
            Use the provided charset encoding to decode the page
            </summary>
        </member>
        <member name="F:WebUtilsLib.WebRequests.CharsetDetection.ForceMozillaCharsetDetection">
            <summary>
            Use this for testing only, it will ignore Header["Content-Type"] and try to detect with MozillaCharsetDetection
            </summary>
        </member>
        <member name="F:WebUtilsLib.WebRequests.CharsetDetection.ContentType">
            <summary>
            Try to find the charset information in http Header["Content-Type"].<para/>
            If not found, fallback to DefaultCharset.
            </summary>
        </member>
        <member name="T:WebUtilsLib.WebRequests.ReadResponseDelegate">
            <summary>
            Delegate used to decide whether to use the ReadResponse until the end method,
            or the limited ReadResponse one.
            </summary>
        </member>
        <member name="T:WebUtilsLib.WebRequestsUtils">
            <summary>
            Set of Routines used to support the WebUtils methods and
            any other Web-Related process that needs what this library provides
            </summary>
        </member>
        <member name="M:WebUtilsLib.WebRequestsUtils.CombineUrlAndQueryString(System.String,System.String,System.String)">
            <summary>
            Combines the URL and query string parameters.<para/>
            Each query string parameter should have a `key=value` format.
            </summary>
            <param name="url">The base url to be combined with the parameters.</param>
            <param name="key">Parameter Key.</param>
            <param name="value">Parameter Value.</param>
            <returns></returns>
        </member>
        <member name="M:WebUtilsLib.WebRequestsUtils.CombineUrlAndQueryString(System.String,System.String)">
            <summary>
            Combines the URL and query string parameters.
            </summary>
            <param name="url">The base url to be combined with the parameters.</param>
            <param name="queryString">The query string.</param>
            <returns>The url assembled with the received query string parameters</returns>
        </member>
        <member name="M:WebUtilsLib.WebRequestsUtils.ParseQueryString(System.String)">
            <summary>
            Parses the query string into name,value objects and returns
            them to be used
            </summary>
            <param name="queryString">The query string.</param>
            <returns>NameValueCollection of parameters parsed out of the query string received as argument</returns>
        </member>
    </members>
</doc>
